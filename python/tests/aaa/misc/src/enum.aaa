struct Bar {
    value as int,
}

enum Foo {
    bool_ as bool,
    int_ as int,
    str_ as str,
    vec_ as vec[str],
    map_ as map[str, str],
    set_ as set[str],
    regex_ as regex,
    enum_ as Foo,
    struct_ as Bar,
    no_data,
    multiple_data as { int, vec[str] },
}

fn Foo:do_things args foo as Foo {
    foo .
    "\n" .

    foo
    match {
        case Foo:bool_ { "bool_ " . . "\n" . }
        case Foo:int_ { "int_ " . . "\n" . }
        case Foo:str_ { "str_ " . . "\n" . }
        case Foo:vec_ { "vec_ " . . "\n" . }
        case Foo:map_ { "map_ " . . "\n" . }
        case Foo:set_ { "set_ " . . "\n" . }
        case Foo:regex_ { "regex_ " . . "\n" . }
        case Foo:enum_ { "enum_ " . . "\n" . }
        case Foo:struct_ { "struct_ " . . "\n" . }
        case Foo:no_data { "no_data " . "\n" . }
        case Foo:multiple_data { "multiple_data " . . " " . . "\n" . }
    }

    foo
    match {
        case Foo:bool_ as a { nop }
        case Foo:int_ as a { nop }
        case Foo:str_ as a { nop }
        case Foo:vec_ as a { nop }
        case Foo:map_ as a { nop }
        case Foo:set_ as a { nop }
        case Foo:regex_ as a { nop }
        case Foo:enum_ as a { nop }
        case Foo:struct_ as a { nop }
        case Foo:no_data { nop }
        case Foo:multiple_data as a, b { nop }
    }



    foo copy drop drop
}

enum OneVariant {
    value as int,
}

fn main {
    Foo
    Foo:do_things
    "\n" .

    true Foo:bool_
    Foo:do_things
    "\n" .

    69 Foo:int_
    Foo:do_things
    "\n" .

    "hello" Foo:str_
    Foo:do_things
    "\n" .

    vec[str] Foo:vec_
    Foo:do_things
    "\n" .

    map[str, str] Foo:map_
    Foo:do_things
    "\n" .

    set[str] Foo:set_
    Foo:do_things
    "\n" .

    regex Foo:regex_
    Foo:do_things
    "\n" .

    Foo Foo:enum_
    Foo:do_things
    "\n" .

    Bar Foo:struct_
    Foo:do_things
    "\n" .

    Foo:no_data
    Foo:do_things
    "\n" .

    3 vec[str] Foo:multiple_data
    Foo:do_things
    "\n" .

    Foo copy
    use foo, foo_copy {
        foo <- { true Foo:bool_ }
        foo . "\n" .
        foo_copy . "\n" .
    }

    OneVariant
    use one_variant {
        one_variant
        match {
            case OneVariant:value { drop }
        }

        one_variant
        match {
            default { nop }
        }
    }
}
