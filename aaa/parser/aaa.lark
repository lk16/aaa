// Grammar for the
//
//    mm
//    ##    mmm    mmm
//   #  #  "   #  "   #
//   #mm#  m"""#  m"""#
//  #    # "mm"#  "mm"#
//
// language.

%import common.WS
%ignore WS

COMMENT: "//" /[^\n]*/ "\n"
%ignore COMMENT

SHEBANG: "#!" /[^\n]*/ "\n"
%ignore SHEBANG

integer: /(-)?[0-9]+/

%import common.ESCAPED_STRING
string: ESCAPED_STRING


// top-level block keywords
FN:         "fn"
_IMPORT:    "import"
STRUCT:     "struct"
TYPE:       "type"

// block delimiters
BEGIN:       "{"
_END:        "}"

// function keywords
_AS:         "as"
_ARGS:       "args"
_RETURN:     "return"

// control flow keywords
ELSE:        "else"
FROM:        "from"
IF:          "if"
WHILE:       "while"

// keywords for builtin types
BOOL:        "bool"
INT:         "int"
MAP:         "map"
STR:         "str"
VEC:         "vec"

// keywords for builtin constants
FALSE:       "false"
TRUE:        "true"

// --- builtin file rules ---

builtins_file_root: (function_declaration | type_declaration)+

// --- regular source file + imports ---

regular_file_root: (function_definition | import_statement | struct_definition)+

import_statement: FROM string _IMPORT import_items
import_items: import_item ("," import_item)* [","]
import_item: identifier [_AS identifier]

// --- structs and types ---

type_declaration: TYPE type_literal

struct_definition: ( \
    STRUCT identifier \
    BEGIN arguments \
    _END \
)

struct_field_query: string struct_field_query_operator
!struct_field_query_operator: "?"

struct_field_update: string BEGIN function_body _END struct_field_update_operator
!struct_field_update_operator: "!"

// --- functions, arguments, return types ---

function_declaration: ( \
    FN function_name \
    [_ARGS arguments] \
    [_RETURN return_types] \
)

function_definition: ( \
    function_declaration \
    BEGIN function_body _END \
)

type_literal: identifier [type_params]
type_params: "[" type_literal ("," type_literal)* [","] "]"

function_name: type_literal [":" identifier]

arguments: argument ("," argument)* [","]
argument: identifier _AS type_literal

return_types: type_literal ("," type_literal)* [","]

// --- literals ---

literal: boolean | integer | string
!boolean: TRUE | FALSE

// --- function body ---

function_body: function_body_item+

function_body_item: ( \
      literal
    | function_name  // includes identifier
    | branch
    | loop
    | struct_field_query
    | struct_field_update \
)

// --- branch ---

branch: ( \
    IF function_body \
    BEGIN function_body _END \
    [ELSE BEGIN function_body _END] \
)

// --- loop ---

loop: WHILE function_body BEGIN function_body _END

// --- identifier ---

identifier:   /[a-zA-Z_]+/
            | /-(?=\s)/
            | /!=(?=\s)/
            | /\.(?=\s)/
            | /\*(?=\s)/
            | /\/(?=\s)/
            | /%(?=\s)/
            | /\+(?=\s)/
            | /<=(?=\s)/
            | /=(?=\s)/
            | />=(?=\s)/
            | /<(?=\s)/
            | />(?=\s)/
