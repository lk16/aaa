// [COMMENT]: this file is used as a template for the main file of the Aaa testing framework
// [IMPORTS]

struct TestFunction {
    function as fn[][],
    name as str,
}

fn make_test_function args function as fn[][], name as str return TestFunction {
    TestFunction
    dup "function" { function } !
    dup "name" { name } !
}

fn push_test_function args tests as vec[TestFunction], function as fn[][], name as str return vec[TestFunction] {
    tests function name make_test_function vec:push
    tests
}

fn left_pad args string as str, length as int return str {
    if string str:len length >= {
        string return
    }

    " " string str:append length left_pad
}

fn TestFunction:format_name args test_function as TestFunction, offset as int, max as int return str {
    "["
    offset repr max repr str:len left_pad str:append
    "/" str:append
    max repr str:append
    "] " str:append
    test_function "name" ? str:append
}

fn main {
    vec[TestFunction]
    // [TEST FUNCTIONS]
    use test_functions {
        1 test_functions vec:len
        use offset, test_count {
            test_functions
            foreach {
                use test_function {
                    test_function offset test_count TestFunction:format_name . "\n" .
                    test_function "function" ? call
                }
                offset <- { offset 1 + }
            }
        }
    }
}
