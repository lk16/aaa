
struct foo {
    bar as int
}

fn not_returning return never {
    0 exit
}

fn a return never {
    not_returning
}

fn b return never {
    3 .
    not_returning
}

fn c return never {
    if true {
        not_returning
    } else {
        not_returning
    }
}

fn d return never {
    while not_returning {
        nop
    }
}

fn e return int {
    // NOTE: The type checker doesn't recognize infinite loops
    while true {
        not_returning
    }
    5
}

fn f return int {
    if true {
        not_returning
    } else {
        5
    }
}

fn g return int {
    if true {
        5
    } else {
        not_returning
    }
}

fn h return int {
    if true {
        5 return
    }
    7
}

fn i return never {
    if not_returning {
        nop
    }
}

fn j return never {
    3
    use x {
        x <- { not_returning }
    }
}

fn k return never {
    foo
    "bar" { not_returning } !
}

fn l return never {
    vec[int]
    foreach {
        drop
        not_returning
    }
}

fn m return int {
    3 use x {
        5 return
    }
}


fn main {
    nop
}
