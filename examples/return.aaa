
fn not_returning return never {
    0 exit
}

fn a return never {
    not_returning
}

fn b return never {
    3 .
    not_returning
}

fn c return never {
    if true {
        not_returning
    } else {
        not_returning
    }
}

fn d return never {
    while not_returning {
        nop
    }
}

fn e return int {
    // NOTE: The type checker doesn't recognize `while true`
    // without break/continue/return as an infinite loop
    while true {
        not_returning
    }
    5
}

fn f return int {
    if true {
        not_returning
    } else {
        5
    }
}

fn g return int {
    if true {
        5
    } else {
        not_returning
    }
}

// TODO more examples


fn main {
    "foo\n" .

    3
    use x {
        if true {
            return
        }
        "bar\n" .
    }
}
