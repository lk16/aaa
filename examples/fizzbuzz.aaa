// Fizzbuzz is a famous interview question

struct Range {
    next_value as int,
    end as int,
}

fn make_range args start as int, end as int return Range {
    Range
    dup "next_value" { start } !
    dup "end" { end } !
}

fn Range:iter args r as Range return Range {
    r
}

fn Range:next args r as Range return int, bool {
    r "next_value" ?
    if dup r "end" ? < {
        true
        r "next_value" { r "next_value" ? 1 + } !
    } else {
        drop 0
        false
    }
}

fn fizzbuzz args n as int {
    n 15 %

    use remainder {
        if remainder 0 = {
            "fizzbuzz" .
            return
        }

        if remainder 5 = remainder 10 = or {
            "buzz" .
            return
        }

        if remainder 3 = remainder 6 = or remainder 9 = or remainder 12 = or {
            "fizz" .
            return
        }
    }

    n .
}

fn main {
    1 101 make_range
    foreach {
        use n {
            n fizzbuzz
            "\n" .
        }
    }
}
