
// elementary types
type bool
type int
type str

// container types
type map[K, V]
type vec[T]

// stack operations
fn drop[A]      args a as A
fn dup[A]       args a as A                 return A, A
fn over[A, B]   args a as A, b as B         return A, B, A
fn rot[A, B, C] args a as A, b as B, c as C return B, C, A
fn swap[A, B]   args a as A, b as B         return B, A

// special operators
fn . [A]  args a as A
fn assert args a as bool
fn nop

// integer arithmetic
fn - args a as int, b as int return int
fn * args a as int, b as int return int
fn + args a as int, b as int return int

// TODO: return enum indicating success/failure instead of extra bool
fn / args a as int, b as int return int, bool
fn % args a as int, b as int return int, bool

// TODO add bitwise operators

// integer comparison
fn != args a as int, b as int return bool
fn <  args a as int, b as int return bool
fn <= args a as int, b as int return bool
fn =  args a as int, b as int return bool
fn >  args a as int, b as int return bool
fn >= args a as int, b as int return bool

// boolean operators
fn and args a as bool, b as bool return bool
fn not args a as bool            return bool
fn or  args a as bool, b as bool return bool

fn vec[T]:clear args v as vec[T]                           return vec[T]
fn vec[T]:copy  args v as vec[T]                           return vec[T], vec[T]
fn vec[T]:empty args v as vec[T]                           return vec[T], bool
fn vec[T]:get   args v as vec[T], offset as int            return vec[T], T
fn vec[T]:pop   args v as vec[T]                           return vec[T], T
fn vec[T]:push  args v as vec[T], item as T                return vec[T]
fn vec[T]:set   args v as vec[T], offset as int, item as T return vec[T]
fn vec[T]:size  args v as vec[T]                           return vec[T], int

fn map[K, V]:clear   args m as map[K, V]                       return map[K, V]
fn map[K, V]:copy    args m as map[K, V]                       return map[K, V], map[K, V]
fn map[K, V]:drop    args m as map[K, V], key as K             return map[K, V]
fn map[K, V]:empty   args m as map[K, V]                       return map[K, V], bool
fn map[K, V]:get     args m as map[K, V], key as K             return map[K, V], V
fn map[K, V]:has_key args m as map[K, V], key as K             return map[K, V], bool
fn map[K, V]:pop     args m as map[K, V], key as K             return map[K, V], V
fn map[K, V]:set     args m as map[K, V], key as K, value as V return map[K, V]
fn map[K, V]:size    args m as map[K, V]                       return map[K, V], int

// TODO: not implemented yet
fn map[K, V]:keys          args m as map[K, V]                       return vec[K]
fn map[K, V]:values        args m as map[K, V]                       return vec[V]

// TODO: rename vec:size and map:size to vec:len and map:len

// struct field operations: are roughly like below
// except *b depends on the value of the str argument

// fn ? args *a, str     return *a, *b
// fn ! args *a, str, *b return *a

// TODO everything below should be moved to separate file in stdlib
// Function and type names should not be reserved / builtin

fn environ return map[str, str]
fn execve args path as str, argv as vec[str], env as map[str, str]
fn exit args code as int
fn fork return int
fn getcwd return str
fn gettimeofday return int, int
fn getpid return int
fn getppid return int
fn setenv args name as str, value as str
fn time return int
fn unsetenv args name as str

// TODO: return enum indicating success/failure instead of extra bool
fn chdir args dir as str return bool
fn close args fd as int return bool
fn fsync args fd as int return bool
fn getenv args name as str return str, bool
fn open args path as str, flag as int, mode as int return int, bool
fn read args fd as int, n as int return str, bool
fn waitpid args pid as int, options as int return int, bool
fn write args fd as int, data as str return int, bool
fn unlink args path as str return bool

// TODO add more syscalls, see http://faculty.nps.edu/cseagle/assembly/sys_call.html
// TODO: not implemented yet
// fn link args str, str return int
// fn chmod args str, int return int

fn str:append     args s as str, other as str                  return str, str
fn str:contains   args s as str, other as str                  return str, bool
fn str:equals     args s as str, other as str                  return str, bool
fn str:join       args s as str, parts as vec[str]             return str, str
fn str:len        args s as str                                return str, int
fn str:lower      args s as str                                return str, str
fn str:replace    args s as str, search as str, replace as str return str, str
fn str:split      args s as str, sep as str                    return str, vec[str]
fn str:strip      args s as str                                return str
fn str:upper      args s as str                                return str, str

// TODO: return enum indicating success/failure instead of extra bool
fn str:find_after args s as str, other as str, offset as int   return str, int, bool
fn str:find       args s as str, other as str                  return str, int, bool
fn str:substr     args s as str, start as int, end as int      return str, str, bool
fn str:to_bool    args s as str                                return str, bool, bool
fn str:to_int     args s as str                                return str, int, bool

// TODO: not implemented yet
// fn int:to_str  args int  return int, str
// fn bool:to_str args bool return bool, str
