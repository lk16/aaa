// Grammar for the
//
//    mm
//    ##    mmm    mmm
//   #  #  "   #  "   #
//   #mm#  m"""#  m"""#
//  #    # "mm"#  "mm"#
//
// language.

// Lark is a parsing toolkit for python. https://github.com/lark-parser/lark
// However it is no longer used for parsing Aaa.

// Tokenizing and parsing are done in modules aaa.tokenizzer and aaa.parser respectively.
// This file is just here as a reference for the grammar used in those parsers and tokenizers.

%import common.WS
%ignore WS

COMMENT: "//" /[^\n]*/ "\n"
%ignore COMMENT

integer: /(-)?[0-9]+/

%import common.ESCAPED_STRING
string: ESCAPED_STRING


// top-level block keywords
FN:         "fn"
_IMPORT:    "import"
STRUCT:     "struct"
TYPE:       "type"

// block delimiters
BEGIN:       "{"
_END:        "}"

// function keywords
_AS:         "as"
_ARGS:       "args"
_RETURN:     "return"

// struct operators
GET_FIELD:    "?"
SET_FIELD:    "!"

// control flow keywords
ELSE:        "else"
FROM:        "from"
FOREACH:     "foreach"
IF:          "if"
USE:         "use"
WHILE:       "while"

// keywords for builtin constants
FALSE:       "false"
TRUE:        "true"

// misscelaneous
ASSIGN:      "<-"
CONST:       "const"
NEVER:       "never"

// --- file roots ---

builtins_file_root: (function_declaration | type_declaration)+

regular_file_root: (function_definition | import_statement | struct_definition)+

// --- imports ---

import_statement: FROM string _IMPORT import_items

import_items: import_item ("," import_item)* [","]

import_item: identifier [_AS identifier]

// --- structs and types ---

type_declaration: TYPE flat_type_literal

struct_definition: STRUCT identifier BEGIN arguments _END

struct_field_query: string GET_FIELD

struct_field_update: string BEGIN function_body _END SET_FIELD

// --- functions, arguments, return types ---

function_declaration: FN function_name [_ARGS arguments] [_RETURN return_types]

function_definition: function_declaration BEGIN function_body _END

flat_type_literal: identifier [flat_type_params]

type_literal: [CONST] identifier [type_params]

type_params: "[" type_literal ("," type_literal)* [","] "]"

flat_type_params: "[" identifier ("," identifier)* [","] "]"

function_name: flat_type_literal [":" identifier]

call: identifier [(type_params) | (":" identifier)]

arguments: argument ("," argument)* [","]

argument: identifier _AS type_literal

return_types: (type_literal ("," type_literal)* [","]) | NEVER

// --- literals ---

literal: boolean | integer | string

!boolean: TRUE | FALSE

// --- function body ---

function_body: function_body_item+

function_body_item: ( \
      literal
    | call
    | branch
    | while_loop
    | struct_field_query
    | struct_field_update \
    | foreach_loop \
    | use_block \
    | assignment
    | RETURN
)

// --- branch ---

branch: IF function_body BEGIN function_body _END [ELSE BEGIN function_body _END]

// --- loops ---

while_loop: WHILE function_body BEGIN function_body _END
foreach_loop: FOREACH BEGIN function_body END

// --- use and assignment ---

variables: identifier ("," identifier)* [","]

use_block: USE variables BEGIN function_body END
assignment: variables ASSIGN BEGIN function_body END

// --- identifier ---

!identifier: /[a-zA-Z_]+/
           | "-"
           | "!="
           | "."
           | "*"
           | "/"
           | "%"
           | "+"
           | "<"
           | "<="
           | "="
           | ">"
           | ">="
