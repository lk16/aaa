{
    "keyword_tokens": {
        "args": "args(?![_a-zA-Z])",
        "as": "as(?![_a-zA-Z])",
        "builtin": "builtin(?![_a-zA-Z])",
        "call": "call(?![_a-zA-Z])",
        "case": "case(?![_a-zA-Z])",
        "const": "const(?![_a-zA-Z])",
        "default": "default(?![_a-zA-Z])",
        "else": "else(?![_a-zA-Z])",
        "enum": "enum(?![_a-zA-Z])",
        "false": "false(?![_a-zA-Z])",
        "foreach": "foreach(?![_a-zA-Z])",
        "from": "from(?![_a-zA-Z])",
        "fn": "fn(?![_a-zA-Z])",
        "if": "if(?![_a-zA-Z])",
        "import": "import(?![_a-zA-Z])",
        "match": "match(?![_a-zA-Z])",
        "never": "never(?![_a-zA-Z])",
        "return": "return(?![_a-zA-Z])",
        "struct": "struct(?![_a-zA-Z])",
        "true": "true(?![_a-zA-Z])",
        "use": "use(?![_a-zA-Z])",
        "while": "while(?![_a-zA-Z])"
    },
    "regular_tokens": {
        "assign": "<-",
        "end": "}",
        "start": "{",
        "char": "'(([^'\\t\\n\\r\\f\\v\\\\\"])|(\\\\[/0befnrt\\\\\"'])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4})|(\\\\U((0[0-9])|10)[0-9a-fA-F]{4})|\")'",
        "colon": ":",
        "comma": ",",
        "comment": "//[^\n]*",
        "get_field": "\\?",
        "identifier": "(-(?![0-9]))|(!=)|(\\.)|(\\*)|(/(?!/))|(%)|(\\+)|(<(?!=))|(<=)|(=)|(>(?!=))|(>=)|([a-zA-Z_]+)",
        "integer": "(-)?[0-9]+",
        "set_field": "!",
        "sq_end": "]",
        "sq_start": "\\[",
        "string": "\"(([^'\\t\\n\\r\\f\\v\\\\\"])|(\\\\[/0befnrt\\\\\"'])|(\\\\x[0-9a-fA-F]{2})|(\\\\u[0-9a-fA-F]{4})|(\\\\U((0[0-9])|10)[0-9a-fA-F]{4})|')*\"",
        "whitespace": "\\s+"
    },
    "filtered_tokens": [
        "comment",
        "whitespace"
    ],
    "nodes": {
        "ARGUMENT": "identifier as TYPE_OR_FUNCTION_POINTER_LITERAL",
        "ARGUMENTS": "args ARGUMENT (comma ARGUMENT)* comma?",
        "ASSIGNMENT": "VARIABLES assign FUNCTION_BODY_BLOCK",
        "BOOLEAN": "true | false",
        "BRANCH": "if FUNCTION_BODY FUNCTION_BODY_BLOCK (else FUNCTION_BODY_BLOCK)?",
        "CASE_BLOCK": "case CASE_LABEL FUNCTION_BODY_BLOCK",
        "CASE_LABEL": "identifier colon identifier (as VARIABLES)?",
        "COMMA_SEPARATED_TYPE_LIST": "TYPE_OR_FUNCTION_POINTER_LITERAL (comma TYPE_OR_FUNCTION_POINTER_LITERAL)* comma?",
        "DEFAULT_BLOCK": "default FUNCTION_BODY_BLOCK",
        "ENUM_DECLARATION": "enum identifier",
        "ENUM_DEFINITION": "ENUM_DECLARATION start ENUM_VARIANTS end",
        "ENUM_VARIANT_ASSOCIATED_DATA": "TYPE_OR_FUNCTION_POINTER_LITERAL | (start COMMA_SEPARATED_TYPE_LIST end)",
        "ENUM_VARIANT": "identifier (as ENUM_VARIANT_ASSOCIATED_DATA)?",
        "ENUM_VARIANTS": "ENUM_VARIANT (comma ENUM_VARIANT)* comma?",
        "FLAT_TYPE_LITERAL": "identifier FLAT_TYPE_PARAMS?",
        "FLAT_TYPE_PARAMS": "sq_start identifier (comma identifier)* comma? sq_end",
        "FOREACH_LOOP": "foreach FUNCTION_BODY_BLOCK",
        "FUNCTION_BODY_BLOCK": "start FUNCTION_BODY end",
        "FUNCTION_BODY_ITEM": "ASSIGNMENT | BOOLEAN | BRANCH | call | char | FOREACH_LOOP | FUNCTION_CALL | FUNCTION_POINTER_TYPE_LITERAL | GET_FUNCTION_POINTER | integer | MATCH_BLOCK | return | STRUCT_FIELD_QUERY | STRUCT_FIELD_UPDATE | USE_BLOCK | WHILE_LOOP | string",
        "FUNCTION_BODY": "FUNCTION_BODY_ITEM+",
        "FUNCTION_CALL": "identifier TYPE_PARAMS? (colon identifier)?",
        "FUNCTION_DECLARATION": "fn FUNCTION_NAME ARGUMENTS? RETURN_TYPES?",
        "FUNCTION_DEFINITION": "(builtin FUNCTION_DECLARATION) | (FUNCTION_DECLARATION FUNCTION_BODY_BLOCK)",
        "FUNCTION_NAME": "FLAT_TYPE_LITERAL (colon identifier)?",
        "FUNCTION_POINTER_TYPE_LITERAL": "fn sq_start COMMA_SEPARATED_TYPE_LIST? sq_end sq_start ((never comma?) | COMMA_SEPARATED_TYPE_LIST)? sq_end",
        "GET_FUNCTION_POINTER": "string fn",
        "IMPORT_ITEM": "identifier (as identifier)?",
        "IMPORT_ITEMS": "IMPORT_ITEM (comma IMPORT_ITEM)* comma?",
        "IMPORT": "from string import IMPORT_ITEMS",
        "MATCH_BLOCK": "match start (CASE_BLOCK | DEFAULT_BLOCK)* end",
        "RETURN_TYPES": "return never | (TYPE_OR_FUNCTION_POINTER_LITERAL (comma TYPE_OR_FUNCTION_POINTER_LITERAL)* comma?)",
        "SOURCE_FILE": "(ENUM_DEFINITION | FUNCTION_DEFINITION | IMPORT | STRUCT_DEFINITION)*",
        "STRUCT_DECLARATION": "struct FLAT_TYPE_LITERAL",
        "STRUCT_DEFINITION": "(builtin STRUCT_DECLARATION) | (STRUCT_DECLARATION start STRUCT_FIELDS? end)",
        "STRUCT_FIELD_QUERY": "string get_field",
        "STRUCT_FIELD_UPDATE": "string FUNCTION_BODY_BLOCK set_field",
        "STRUCT_FIELD": "identifier as TYPE_OR_FUNCTION_POINTER_LITERAL",
        "STRUCT_FIELDS": "STRUCT_FIELD (comma STRUCT_FIELD)* comma?",
        "TYPE_LITERAL": "const? identifier TYPE_PARAMS?",
        "TYPE_OR_FUNCTION_POINTER_LITERAL": "FUNCTION_POINTER_TYPE_LITERAL | TYPE_LITERAL",
        "TYPE_PARAMS": "sq_start TYPE_OR_FUNCTION_POINTER_LITERAL (comma TYPE_OR_FUNCTION_POINTER_LITERAL)* comma? sq_end",
        "USE_BLOCK": "use VARIABLES FUNCTION_BODY_BLOCK",
        "VARIABLES": "identifier (comma identifier)* comma?",
        "WHILE_LOOP": "while FUNCTION_BODY FUNCTION_BODY_BLOCK"
    },
    "root_node": "SOURCE_FILE"
}
